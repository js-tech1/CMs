# from django.contrib.auth.models import User
# class ListUser(generics.ListAPIView):
#     queryset= User.objects.all();
#     serializer_class = TodoSerializer
    
# class userUser(generics.CreateAPIView):
#     queryset = User.objects.all();
#     serializer_class = TodoSerializer
    
# class UpdateUser(generics.RetrieveUpdateAPIView):
#     queryset = User.objects.all();
#     serializer_class = TodoSerializer
    
# class deleUser(generics.DestroyAPIView):
#     queryset = User.objects.all();
#     serializer_class = TodoSerializer

# # class addPost(generics.CreateAPIView):
# #     queryset = Blog.objects.all();
# #     serializer_class = PostSerializer
# #-----------------------------------------------------------------
# class PostCreate(generics.CreateAPIView):
#     queryset = Post.objects.all()
#     serializer_class = PostSerializer
#     permission_classes = [permissions.IsAuthenticated]

#     def perform_create(self, serializer):
#         serializer.save(owner=self.request.user)

# class BlogCreate(generics.CreateAPIView):
#     queryset = Blog.objects.all()
#     serializer_class = BlogSerializer
#     permission_classes = [permissions.IsAuthenticated]

#     def perform_create(self, serializer):
#         serializer.save(owner=self.request.user)
# class PostUpdate(generics.UpdateAPIView):
#     queryset = Post.objects.all()
#     serializer_class = PostSerializer
#     permission_classes = [permissions.IsAuthenticated]

#     def get_queryset(self):
#         queryset = super().get_queryset()
#         return queryset.filter(owner=self.request.user)

# class BlogUpdate(generics.UpdateAPIView):
#     queryset = Blog.objects.all()
#     serializer_class = BlogSerializer
#     permission_classes = [permissions.IsAuthenticated]

#     def get_queryset(self):
#         queryset = super().get_queryset()
#         return queryset.filter(owner=self.request.user)

# class PostDestroy(generics.DestroyAPIView):
#     queryset = Post.objects.all()
#     serializer_class = PostSerializer
#     permission_classes = [permissions.IsAuthenticated]

#     def get_queryset(self):
#         queryset = super().get_queryset()
#         return queryset.filter(owner=self.request.user)

# class BlogDestroy(generics.DestroyAPIView):
#     queryset = Blog.objects.all()
#     serializer_class = BlogSerializer
#     permission_classes = [permissions.IsAuthenticated]

#     def get_queryset(self):
#         queryset = super().get_queryset()
#         return queryset.filter(owner=self.request.user)
    
# class PostRetrieve(generics.RetrieveAPIView):
#     queryset = Post.objects.all()
#     serializer_class = PostSerializer
#     permission_classes = [permissions.AllowAny]  # Public posts can be accessed by any user

#     def get_queryset(self):
#         queryset = super().get_queryset()
#         return queryset.filter(is_public=True)

# class BlogRetrieve(generics.RetrieveAPIView):
#     queryset = Blog.objects.all()
#     serializer_class = BlogSerializer
#     permission_classes = [permissions.AllowAny]  # Public blogs can be accessed by any user

#     def get_queryset(self):
#         queryset = super().get_queryset()
#         return queryset.filter(is_public=True)
# #------------------------------------------------------------------
# class like(generics.ListAPIView):
#     queryset= Blog.objects.all();
#     serializer_class = PostSerializer
    
class LikeCreate(generics.CreateAPIView):
    queryset = PostLike.objects.all()
    serializer_class = LikeSerializer
    
# class LikeRetrieve(generics.RetrieveAPIView):
#     queryset = PostLike.objects.all()
#     serializer_class = LikeSerializer

# class LikeUpdate(generics.UpdateAPIView):
#     queryset = Blog.objects.all()
#     serializer_class = LikeSerializer


# class LikeDestroy(generics.DestroyAPIView):
#     queryset = Blog.objects.all()
#     serializer_class = LikeSerializer

